// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package internal is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	JoinRequest
	JoinResponse
	FetchRequest
	Rule
	ListRules
*/
package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JoinRequest struct {
	Token string                  `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Ip    string                  `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Extra *google_protobuf.Struct `protobuf:"bytes,3,opt,name=extra" json:"extra,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JoinRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JoinRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *JoinRequest) GetExtra() *google_protobuf.Struct {
	if m != nil {
		return m.Extra
	}
	return nil
}

type JoinResponse struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JoinResponse) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *JoinResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FetchRequest struct {
	Num    int64  `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Cursor string `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *FetchRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type Rule struct {
	Uuid      string                      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Extra     *google_protobuf.Struct     `protobuf:"bytes,2,opt,name=extra" json:"extra,omitempty"`
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Rule) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Rule) GetExtra() *google_protobuf.Struct {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *Rule) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Rule) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ListRules struct {
	Rules  []*Rule `protobuf:"bytes,1,rep,name=Rules" json:"Rules,omitempty"`
	Cursor string  `protobuf:"bytes,2,opt,name=Cursor" json:"Cursor,omitempty"`
}

func (m *ListRules) Reset()                    { *m = ListRules{} }
func (m *ListRules) String() string            { return proto.CompactTextString(m) }
func (*ListRules) ProtoMessage()               {}
func (*ListRules) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRules) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ListRules) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func init() {
	proto.RegisterType((*JoinRequest)(nil), "internal.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "internal.JoinResponse")
	proto.RegisterType((*FetchRequest)(nil), "internal.FetchRequest")
	proto.RegisterType((*Rule)(nil), "internal.Rule")
	proto.RegisterType((*ListRules)(nil), "internal.ListRules")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Master service

type MasterClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	StreamRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (Master_StreamRuleClient, error)
	GetListRule(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*ListRules, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/internal.Master/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) StreamRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (Master_StreamRuleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Master_serviceDesc.Streams[0], c.cc, "/internal.Master/StreamRule", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterStreamRuleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Master_StreamRuleClient interface {
	Recv() (*Rule, error)
	grpc.ClientStream
}

type masterStreamRuleClient struct {
	grpc.ClientStream
}

func (x *masterStreamRuleClient) Recv() (*Rule, error) {
	m := new(Rule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *masterClient) GetListRule(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*ListRules, error) {
	out := new(ListRules)
	err := grpc.Invoke(ctx, "/internal.Master/GetListRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Master service

type MasterServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	StreamRule(*Rule, Master_StreamRuleServer) error
	GetListRule(context.Context, *FetchRequest) (*ListRules, error)
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Master/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_StreamRule_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rule)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).StreamRule(m, &masterStreamRuleServer{stream})
}

type Master_StreamRuleServer interface {
	Send(*Rule) error
	grpc.ServerStream
}

type masterStreamRuleServer struct {
	grpc.ServerStream
}

func (x *masterStreamRuleServer) Send(m *Rule) error {
	return x.ServerStream.SendMsg(m)
}

func _Master_GetListRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetListRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Master/GetListRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetListRule(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Master_Join_Handler,
		},
		{
			MethodName: "GetListRule",
			Handler:    _Master_GetListRule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRule",
			Handler:       _Master_StreamRule_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x6d, 0x3e, 0x5a, 0xe8, 0xa4, 0x54, 0xc8, 0x40, 0x89, 0x22, 0x24, 0xaa, 0x88, 0x43, 0x2f,
	0xa4, 0x55, 0x39, 0x50, 0x21, 0x2e, 0xa8, 0x12, 0x08, 0x04, 0x97, 0x14, 0x7e, 0x40, 0x9a, 0x0e,
	0xc5, 0xa2, 0x89, 0x83, 0x3d, 0x46, 0xfb, 0xaf, 0xf6, 0x17, 0xec, 0x7f, 0x5b, 0xc5, 0x4e, 0xda,
	0x6e, 0x76, 0xa5, 0xdd, 0x9b, 0x67, 0xfc, 0x9e, 0xdf, 0xbc, 0x37, 0x86, 0x27, 0x0a, 0xe5, 0x7f,
	0x9e, 0x63, 0x52, 0x49, 0x41, 0x82, 0x3d, 0xe6, 0x25, 0xa1, 0x2c, 0xb3, 0x43, 0xf4, 0x6a, 0x2f,
	0xc4, 0xfe, 0x80, 0x73, 0xd3, 0xdf, 0xea, 0xdf, 0x73, 0x45, 0x52, 0xe7, 0x64, 0x71, 0xd1, 0xeb,
	0xee, 0x2d, 0xf1, 0x02, 0x15, 0x65, 0x45, 0x65, 0x01, 0xf1, 0x16, 0x82, 0x6f, 0x82, 0x97, 0x29,
	0xfe, 0xd3, 0xa8, 0x88, 0x3d, 0x87, 0x3e, 0x89, 0xbf, 0x58, 0x86, 0xce, 0xd4, 0x99, 0x0d, 0x53,
	0x5b, 0xb0, 0x31, 0xb8, 0xbc, 0x0a, 0x5d, 0xd3, 0x72, 0x79, 0xc5, 0xde, 0x42, 0x1f, 0x2f, 0x48,
	0x66, 0xa1, 0x37, 0x75, 0x66, 0xc1, 0xf2, 0x65, 0x62, 0x55, 0x92, 0x56, 0x25, 0xd9, 0x98, 0x19,
	0x52, 0x8b, 0x8a, 0x3f, 0xc2, 0xc8, 0x6a, 0xa8, 0x4a, 0x94, 0x0a, 0x19, 0x03, 0x5f, 0x6b, 0xbe,
	0x6b, 0x34, 0xcc, 0x99, 0x85, 0xf0, 0xa8, 0x40, 0xa5, 0xb2, 0x3d, 0x36, 0x3a, 0x6d, 0x19, 0xaf,
	0x60, 0xf4, 0x19, 0x29, 0xff, 0xd3, 0x8e, 0xf8, 0x14, 0xbc, 0x52, 0x17, 0x86, 0xec, 0xa5, 0xf5,
	0x91, 0x4d, 0x60, 0x90, 0x6b, 0xa9, 0x84, 0x6c, 0xa8, 0x4d, 0x15, 0x5f, 0x39, 0xe0, 0xa7, 0xfa,
	0x70, 0xb7, 0xe0, 0xd1, 0x83, 0xfb, 0x10, 0x0f, 0x6c, 0x05, 0xc3, 0x5f, 0xd5, 0x2e, 0x23, 0xdc,
	0x7d, 0xa2, 0xc6, 0x76, 0x74, 0x8b, 0xf2, 0xb3, 0x0d, 0x37, 0x3d, 0x81, 0x6b, 0xe6, 0x5a, 0x62,
	0xc3, 0xf4, 0xef, 0x67, 0x1e, 0xc1, 0xf1, 0x57, 0x18, 0x7e, 0xe7, 0x8a, 0x6a, 0x0b, 0x8a, 0xbd,
	0x81, 0xbe, 0x39, 0x84, 0xce, 0xd4, 0x9b, 0x05, 0xcb, 0x71, 0xd2, 0xfe, 0x80, 0xa4, 0x6e, 0xa7,
	0xf6, 0xb2, 0x8e, 0x62, 0x7d, 0x23, 0x0a, 0x5b, 0x2d, 0x2f, 0x1d, 0x18, 0xfc, 0xc8, 0x14, 0xa1,
	0x64, 0xef, 0xc1, 0xaf, 0xb7, 0xc1, 0x5e, 0x9c, 0x5e, 0x38, 0xfb, 0x01, 0xd1, 0xa4, 0xdb, 0xb6,
	0x4b, 0x8b, 0x7b, 0x6c, 0x01, 0xb0, 0x21, 0x89, 0x59, 0x61, 0x32, 0xed, 0x0c, 0x10, 0x75, 0xea,
	0xb8, 0xb7, 0x70, 0xd8, 0x07, 0x08, 0xbe, 0x20, 0xb5, 0x1e, 0xd8, 0xd9, 0xd3, 0xe7, 0x1b, 0x8d,
	0x9e, 0x9d, 0xfa, 0x47, 0xbf, 0xdb, 0x81, 0xc9, 0xe6, 0xdd, 0x75, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x50, 0x6f, 0x3e, 0x85, 0xf9, 0x02, 0x00, 0x00,
}
