// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minion.proto

package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RuleRequest struct {
	Extra *google_protobuf.Struct `protobuf:"bytes,1,opt,name=extra" json:"extra,omitempty"`
}

func (m *RuleRequest) Reset()                    { *m = RuleRequest{} }
func (m *RuleRequest) String() string            { return proto.CompactTextString(m) }
func (*RuleRequest) ProtoMessage()               {}
func (*RuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RuleRequest) GetExtra() *google_protobuf.Struct {
	if m != nil {
		return m.Extra
	}
	return nil
}

type RuleResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *RuleResponse) Reset()                    { *m = RuleResponse{} }
func (m *RuleResponse) String() string            { return proto.CompactTextString(m) }
func (*RuleResponse) ProtoMessage()               {}
func (*RuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RuleResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type StatsRequest struct {
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type StatsResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *StatsResponse) Reset()                    { *m = StatsResponse{} }
func (m *StatsResponse) String() string            { return proto.CompactTextString(m) }
func (*StatsResponse) ProtoMessage()               {}
func (*StatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *StatsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RuleRequest)(nil), "internal.RuleRequest")
	proto.RegisterType((*RuleResponse)(nil), "internal.RuleResponse")
	proto.RegisterType((*StatsRequest)(nil), "internal.StatsRequest")
	proto.RegisterType((*StatsResponse)(nil), "internal.StatsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Minion service

type MinionClient interface {
	PassRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type minionClient struct {
	cc *grpc.ClientConn
}

func NewMinionClient(cc *grpc.ClientConn) MinionClient {
	return &minionClient{cc}
}

func (c *minionClient) PassRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := grpc.Invoke(ctx, "/internal.Minion/PassRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := grpc.Invoke(ctx, "/internal.Minion/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Minion service

type MinionServer interface {
	PassRule(context.Context, *RuleRequest) (*RuleResponse, error)
	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)
}

func RegisterMinionServer(s *grpc.Server, srv MinionServer) {
	s.RegisterService(&_Minion_serviceDesc, srv)
}

func _Minion_PassRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).PassRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Minion/PassRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).PassRule(ctx, req.(*RuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Minion/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Minion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.Minion",
	HandlerType: (*MinionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PassRule",
			Handler:    _Minion_PassRule_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Minion_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minion.proto",
}

func init() { proto.RegisterFile("minion.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xdd, 0x83, 0xeb, 0x3a, 0x5d, 0x3d, 0x04, 0x6c, 0xcb, 0xe2, 0x41, 0x72, 0x10, 0x3d,
	0x98, 0x42, 0x3d, 0xaa, 0x67, 0x4f, 0x82, 0xa4, 0x9f, 0x20, 0x95, 0x71, 0x59, 0xd8, 0x26, 0x6b,
	0x66, 0x02, 0x7e, 0x00, 0x3f, 0xb8, 0x98, 0x3f, 0xb0, 0xd8, 0xe3, 0x7b, 0xbc, 0x5f, 0xde, 0xbc,
	0x40, 0x7b, 0x18, 0xec, 0xe0, 0xac, 0x9a, 0xbc, 0x63, 0x27, 0x9a, 0xc1, 0x32, 0x7a, 0x6b, 0xc6,
	0xee, 0xba, 0x77, 0xae, 0x1f, 0x71, 0x13, 0xfd, 0x7d, 0xf8, 0xdc, 0x10, 0xfb, 0xf0, 0xc1, 0x29,
	0x27, 0x9f, 0x61, 0xa1, 0xc3, 0x88, 0x1a, 0xbf, 0x02, 0x12, 0x8b, 0x07, 0x38, 0xc5, 0x6f, 0xf6,
	0x66, 0x5d, 0xdd, 0x54, 0x77, 0x8b, 0xed, 0x4a, 0x25, 0x58, 0x15, 0x58, 0xed, 0x22, 0xac, 0x53,
	0x4a, 0xde, 0x42, 0x9b, 0x68, 0x9a, 0x9c, 0x25, 0x14, 0x4b, 0xa8, 0x89, 0x0d, 0x07, 0x8a, 0xfc,
	0xb9, 0xce, 0x4a, 0x5e, 0x42, 0xbb, 0x63, 0xc3, 0x94, 0x6b, 0xe4, 0x3d, 0x5c, 0x64, 0x9d, 0xc1,
	0x35, 0x9c, 0x1d, 0x90, 0xc8, 0xf4, 0x98, 0xc9, 0x22, 0xb7, 0x3f, 0x15, 0xd4, 0x6f, 0x71, 0x99,
	0x78, 0x82, 0xe6, 0xdd, 0x10, 0xfd, 0x35, 0x8a, 0x2b, 0x55, 0x06, 0xaa, 0xd9, 0xfd, 0xdd, 0xf2,
	0xbf, 0x9d, 0xde, 0x97, 0x27, 0xe2, 0x05, 0x9a, 0x57, 0xe4, 0xd8, 0x2a, 0x66, 0xa9, 0xf9, 0x59,
	0xdd, 0xea, 0xc8, 0x2f, 0xf8, 0xbe, 0x8e, 0x3f, 0xf0, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x7d,
	0xa6, 0xf4, 0xea, 0x66, 0x01, 0x00, 0x00,
}
